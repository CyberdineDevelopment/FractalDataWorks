name: Publish to NuGet

on:
  push:
    branches:
      - master   # Publish stable releases (0.1.0)
      - develop  # Publish pre-release packages (0.1.0-alpha.123)
  workflow_dispatch:

jobs:
  publish:
    name: Build and Publish NuGet Packages
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for GitVersioning

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '10.0.x'
          dotnet-quality: 'preview'

      - name: Install Nerdbank.GitVersioning
        run: dotnet tool install -g nbgv

      - name: Get version from Nerdbank.GitVersioning
        id: nbgv
        run: |
          $version = nbgv get-version -f json | ConvertFrom-Json
          Write-Host "Version: $($version.NuGetPackageVersion)"
          Write-Host "AssemblyVersion: $($version.AssemblyVersion)"
          Write-Host "SimpleVersion: $($version.SimpleVersion)"
          Write-Output "nuget_version=$($version.NuGetPackageVersion)" >> $env:GITHUB_OUTPUT
          Write-Output "assembly_version=$($version.AssemblyVersion)" >> $env:GITHUB_OUTPUT
          Write-Output "simple_version=$($version.SimpleVersion)" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Restore dependencies
        run: dotnet restore

      - name: Discover public projects
        id: discover
        shell: pwsh
        run: |
          $projects = & ./scripts/Get-PublicProjects.ps1 -ShowDirectories
          Write-Host "Public projects to package:"
          $projects | ForEach-Object { Write-Host "  - $_" }

          # Count projects
          Write-Output "project_count=$($projects.Count)" >> $env:GITHUB_OUTPUT

      - name: Build public projects
        run: dotnet build --configuration Release --no-restore

      - name: Run tests
        run: dotnet test --configuration Release --no-build --verbosity normal --filter "IsPublicProject=true"

      - name: Pack NuGet packages
        shell: pwsh
        run: |
          $projects = & ./scripts/Get-PublicProjects.ps1 -ShowDirectories
          $packaged = 0

          # Create artifacts directory
          New-Item -ItemType Directory -Path "artifacts" -Force | Out-Null

          foreach ($projectPath in $projects) {
            $csprojFile = Get-ChildItem -Path $projectPath -Filter "*.csproj" | Select-Object -First 1

            if ($csprojFile -and $csprojFile.Name -notlike "*Tests.csproj") {
              Write-Host "Packing: $($csprojFile.BaseName)" -ForegroundColor Cyan

              dotnet pack $csprojFile.FullName `
                --configuration Release `
                --no-build `
                --output artifacts `
                /p:IncludeSymbols=true `
                /p:SymbolPackageFormat=snupkg

              if ($LASTEXITCODE -eq 0) {
                Write-Host "  ✓ Packed: $($csprojFile.BaseName)" -ForegroundColor Green
                $packaged++
              } else {
                Write-Host "  ✗ Failed: $($csprojFile.BaseName)" -ForegroundColor Red
              }
            }
          }

          Write-Host ""
          Write-Host "Packaged $packaged projects" -ForegroundColor Green

      - name: List packages
        shell: pwsh
        run: |
          Write-Host "NuGet packages created:" -ForegroundColor Cyan
          Get-ChildItem -Path artifacts -Filter "*.nupkg" | ForEach-Object {
            Write-Host "  - $($_.Name)" -ForegroundColor Green
          }

          Write-Host ""
          Write-Host "Symbol packages created:" -ForegroundColor Cyan
          Get-ChildItem -Path artifacts -Filter "*.snupkg" | ForEach-Object {
            Write-Host "  - $($_.Name)" -ForegroundColor Green
          }

      - name: Publish to NuGet.org
        shell: pwsh
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          if (-not $env:NUGET_API_KEY) {
            Write-Host "ERROR: NUGET_API_KEY secret not configured" -ForegroundColor Red
            exit 1
          }

          $packages = Get-ChildItem -Path artifacts -Filter "*.nupkg" | Where-Object { $_.Name -notlike "*.symbols.nupkg" }

          foreach ($package in $packages) {
            Write-Host "Publishing: $($package.Name)" -ForegroundColor Cyan

            dotnet nuget push $package.FullName `
              --source https://api.nuget.org/v3/index.json `
              --api-key $env:NUGET_API_KEY `
              --skip-duplicate

            if ($LASTEXITCODE -eq 0) {
              Write-Host "  ✓ Published: $($package.Name)" -ForegroundColor Green
            } else {
              Write-Host "  ✗ Failed: $($package.Name)" -ForegroundColor Red
            }
          }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: artifacts/*.nupkg
          retention-days: 90

      - name: Summary
        shell: pwsh
        run: |
          $summary = @"
          ### NuGet Publishing Complete ✓

          **Version:** ${{ steps.nbgv.outputs.nuget_version }}
          **Published:** ${{ steps.discover.outputs.project_count }} packages
          **Target:** NuGet.org
          **Branch:** ${{ github.ref_name }}

          Packages are now available on NuGet.org:
          \`\`\`bash
          dotnet add package FractalDataWorks.Results --version ${{ steps.nbgv.outputs.nuget_version }}
          dotnet add package FractalDataWorks.Collections --version ${{ steps.nbgv.outputs.nuget_version }}
          dotnet add package FractalDataWorks.Services --version ${{ steps.nbgv.outputs.nuget_version }}
          \`\`\`

          **Version details:**
          - NuGet version: ${{ steps.nbgv.outputs.nuget_version }}
          - Assembly version: ${{ steps.nbgv.outputs.assembly_version }}
          - Simple version: ${{ steps.nbgv.outputs.simple_version }}

          See artifacts for all published packages.
          "@

          $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding UTF8
