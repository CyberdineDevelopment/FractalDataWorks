name: Sync Public Mirror

on:
  push:
    branches:
      - master
      - develop
  workflow_dispatch:
    inputs:
      force_sync:
        description: 'Force full sync even if no changes detected'
        required: false
        default: 'false'

jobs:
  sync:
    name: Sync to Public Repository
    runs-on: windows-latest

    steps:
      - name: Checkout private repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PRIVATE_REPO_TOKEN }}

      - name: Discover public projects
        id: discover
        shell: pwsh
        run: |
          Write-Host "Discovering public projects..." -ForegroundColor Cyan

          # Find all .csproj files marked as public
          $projectFiles = Get-ChildItem -Path . -Filter "*.csproj" -Recurse -File |
            Where-Object { $_.FullName -notlike "*\bin\*" -and $_.FullName -notlike "*\obj\*" }

          $publicProjects = @()

          foreach ($projectFile in $projectFiles) {
            [xml]$csproj = Get-Content $projectFile.FullName
            $isPublic = $csproj.Project.PropertyGroup.IsPublicProject | Where-Object { $_ -eq 'true' }

            if ($isPublic) {
              $relativePath = [System.IO.Path]::GetRelativePath((Get-Location), $projectFile.DirectoryName)
              $publicProjects += $relativePath
            }
          }

          Write-Host "Found $($publicProjects.Count) public projects:"
          $publicProjects | ForEach-Object { Write-Host "  - $_" }

          # Save to file for sync step
          $publicProjects | Out-File -FilePath "$env:TEMP\public-projects.txt" -Encoding UTF8

          Write-Output "project_count=$($publicProjects.Count)" >> $env:GITHUB_OUTPUT

      - name: Checkout public repository
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.PUBLIC_REPO_NAME }}
          token: ${{ secrets.PUBLIC_REPO_TOKEN }}
          path: public-repo
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Sync public projects
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          $privateRepo = $PWD
          $publicRepo = Join-Path $PWD "public-repo"

          Write-Host "Private repo: $privateRepo" -ForegroundColor Cyan
          Write-Host "Public repo:  $publicRepo" -ForegroundColor Cyan
          Write-Host ""

          # Read public projects list
          $publicProjects = Get-Content "$env:TEMP\public-projects.txt"

          # Clean public repo (except .git and .github)
          Get-ChildItem $publicRepo -Exclude ".git",".github" |
            Remove-Item -Recurse -Force -ErrorAction SilentlyContinue

          Write-Host "Syncing public projects..." -ForegroundColor Cyan

          # Copy each public project
          $copiedCount = 0
          foreach ($projectPath in $publicProjects) {
            $sourcePath = Join-Path $privateRepo $projectPath
            $destPath = Join-Path $publicRepo $projectPath

            if (Test-Path $sourcePath) {
              # Create parent directory
              $destParent = Split-Path $destPath -Parent
              if (-not (Test-Path $destParent)) {
                New-Item -ItemType Directory -Path $destParent -Force | Out-Null
              }

              # Copy directory
              Copy-Item -Path $sourcePath -Destination $destPath -Recurse -Force
              Write-Host "  ✓ $projectPath" -ForegroundColor Green
              $copiedCount++
            } else {
              Write-Host "  ⚠ $projectPath (not found)" -ForegroundColor Yellow
            }
          }

          # Copy root configuration files
          $rootFiles = @(
            ".editorconfig",
            ".gitignore",
            "Directory.Build.props",
            "Directory.Packages.props",
            "PublicProjects.props",
            "coverlet.runsettings",
            "global.json",
            "LICENSE",
            "NOTICE",
            "nuget.config",
            "version.json",
            "xunit.runner.json"
          )

          Write-Host ""
          Write-Host "Copying root configuration files..." -ForegroundColor Cyan
          foreach ($file in $rootFiles) {
            $sourcePath = Join-Path $privateRepo $file
            $destPath = Join-Path $publicRepo $file

            if (Test-Path $sourcePath) {
              Copy-Item -Path $sourcePath -Destination $destPath -Force
              Write-Host "  ✓ $file" -ForegroundColor Green
            }
          }

          # Copy documentation
          $docPath = Join-Path $privateRepo "docs"
          if (Test-Path $docPath) {
            Write-Host ""
            Write-Host "Copying documentation..." -ForegroundColor Cyan
            Copy-Item -Path $docPath -Destination (Join-Path $publicRepo "docs") -Recurse -Force
            Write-Host "  ✓ docs/" -ForegroundColor Green
          }

          # Copy samples
          $samplesPath = Join-Path $privateRepo "samples"
          if (Test-Path $samplesPath) {
            Write-Host ""
            Write-Host "Copying samples..." -ForegroundColor Cyan

            # Only copy public samples (SourceGenerators, EnhancedEnums)
            $publicSamples = @("SourceGenerators", "EnhancedEnums", "README.md")
            foreach ($sample in $publicSamples) {
              $sampleSource = Join-Path $samplesPath $sample
              if (Test-Path $sampleSource) {
                $sampleDest = Join-Path $publicRepo "samples" $sample
                $sampleDestParent = Split-Path $sampleDest -Parent
                if (-not (Test-Path $sampleDestParent)) {
                  New-Item -ItemType Directory -Path $sampleDestParent -Force | Out-Null
                }
                Copy-Item -Path $sampleSource -Destination $sampleDest -Recurse -Force
                Write-Host "  ✓ samples/$sample" -ForegroundColor Green
              }
            }
          }

          # Copy public-specific README if it exists
          $publicReadme = Join-Path $privateRepo ".github" "PUBLIC_README.md"
          if (Test-Path $publicReadme) {
            Copy-Item -Path $publicReadme -Destination (Join-Path $publicRepo "README.md") -Force
            Write-Host "  ✓ README.md (public version)" -ForegroundColor Green
          } else {
            # Otherwise copy main README
            $mainReadme = Join-Path $privateRepo "README.md"
            if (Test-Path $mainReadme) {
              Copy-Item -Path $mainReadme -Destination (Join-Path $publicRepo "README.md") -Force
              Write-Host "  ✓ README.md" -ForegroundColor Green
            }
          }

          Write-Host ""
          Write-Host "✓ Sync complete - copied $copiedCount projects" -ForegroundColor Green

      - name: Sync public repo workflows
        shell: pwsh
        run: |
          $privateRepo = $PWD
          $publicRepo = Join-Path $PWD "public-repo"

          Write-Host "Syncing GitHub workflows for public repo..." -ForegroundColor Cyan

          # Create .github/workflows directory in public repo
          $workflowDir = Join-Path $publicRepo ".github" "workflows"
          if (-not (Test-Path $workflowDir)) {
            New-Item -ItemType Directory -Path $workflowDir -Force | Out-Null
          }

          # Copy the NuGet.org publish workflow
          $nugetOrgWorkflow = Join-Path $privateRepo ".github" "workflows" "publish-nuget-org.yml"
          if (Test-Path $nugetOrgWorkflow) {
            Copy-Item -Path $nugetOrgWorkflow -Destination (Join-Path $workflowDir "publish-nuget.yml") -Force
            Write-Host "  ✓ publish-nuget.yml (for NuGet.org)" -ForegroundColor Green
          }

      - name: Update project URLs for public repo
        shell: pwsh
        run: |
          cd public-repo

          Write-Host "Updating PackageProjectUrl in all projects..." -ForegroundColor Cyan

          $publicRepoUrl = "https://github.com/CyberdineDevelopment/FractalDataWorks-Platform"
          $projects = Get-ChildItem -Path . -Filter "*.csproj" -Recurse -File |
            Where-Object { $_.FullName -notlike "*\bin\*" -and $_.FullName -notlike "*\obj\*" }

          $updated = 0
          foreach ($proj in $projects) {
            $content = Get-Content $proj.FullName -Raw

            # Remove existing PackageProjectUrl if present (anywhere in the file)
            $content = $content -replace '<PackageProjectUrl>.*?</PackageProjectUrl>\s*', ''

            # Add PackageProjectUrl after first PropertyGroup opening tag
            if ($content -match '(<PropertyGroup>\s*)') {
              # Check if it doesn't already have the correct URL
              if ($content -notmatch "<PackageProjectUrl>$([regex]::Escape($publicRepoUrl))</PackageProjectUrl>") {
                $content = $content -replace '(<PropertyGroup>\s*\r?\n)', "`$1    <PackageProjectUrl>$publicRepoUrl</PackageProjectUrl>`n"
                Set-Content -Path $proj.FullName -Value $content -NoNewline
                Write-Host "  ✓ $($proj.BaseName)" -ForegroundColor Green
                $updated++
              }
            }
          }

          Write-Host ""
          Write-Host "✓ Updated $updated projects with public repo URL" -ForegroundColor Green

      - name: Generate README index
        shell: pwsh
        run: |
          cd public-repo

          Write-Host "Generating README index..." -ForegroundColor Cyan

          # Find all projects with READMEs
          $readmes = Get-ChildItem -Path . -Filter "README.md" -Recurse -File |
            Where-Object {
              $_.FullName -notlike "*\bin\*" -and
              $_.FullName -notlike "*\obj\*" -and
              $_.DirectoryName -notmatch "\\(tests|samples)" -and
              $_.FullName -notmatch "^.*\\README\.md$"  # Exclude root README
            } | Sort-Object DirectoryName

          # Build README content
          $readme = @"
          # FractalDataWorks Platform

          Open-source .NET framework for service-oriented applications with Railway-Oriented Programming, advanced source generation, and type-safe extensibility.

          ## 📦 Packages

          "@

          $currentCategory = ""
          foreach ($file in $readmes) {
            $relativePath = [System.IO.Path]::GetRelativePath((Get-Location), $file.FullName)
            $projectName = Split-Path (Split-Path $file.DirectoryName -Leaf) -Leaf

            # Determine category from path
            $category = if ($relativePath -like "src\*") {
              $parts = $relativePath.Split('\')
              if ($parts[1] -match "\.Analyzers$") { "Analyzers & Code Fixes" }
              elseif ($parts[1] -match "\.SourceGenerators$") { "Source Generators" }
              elseif ($parts[1] -match "\.Abstractions$") { "Core Abstractions" }
              elseif ($parts[1] -match "^FractalDataWorks\.(Collections|EnhancedEnums|ServiceTypes|Messages|Results)$") { "Core Framework" }
              elseif ($parts[1] -match "^FractalDataWorks\.Services") { "Services" }
              else { "Other" }
            } else { "Samples" }

            # Add category header if new
            if ($category -ne $currentCategory) {
              $readme += "`n### $category`n`n"
              $currentCategory = $category
            }

            # Add project link
            $readme += "- [**$projectName**]($($relativePath -replace '\\','/'))`n"
          }

          $readme += @"

          ## 📖 Documentation

          - [Architecture Overview](docs/Architecture-Overview.md)
          - [Service Developer Guide](docs/Service-Developer-Guide.md)
          - [Source Generator Guide](docs/Source-Generator-Guide.md)
          - [Testing Guide](docs/Testing-Guide.md)

          ## 🚀 Getting Started

          Install packages from NuGet.org:

          ``````bash
          dotnet add package FractalDataWorks.Results
          dotnet add package FractalDataWorks.Collections
          dotnet add package FractalDataWorks.Services
          ``````

          ## 📄 License

          Apache 2.0 - see [LICENSE](LICENSE) for details.

          ## 🔗 Links

          - [GitHub Repository](https://github.com/CyberdineDevelopment/FractalDataWorks-Platform)
          - [NuGet Packages](https://www.nuget.org/profiles/CyberdineDevelopment)
          "@

          # Write README
          Set-Content -Path "README.md" -Value $readme -NoNewline
          Write-Host "✓ Generated README.md with project index" -ForegroundColor Green

      - name: Create public solution file
        shell: pwsh
        run: |
          cd public-repo

          Write-Host "Creating public solution file..." -ForegroundColor Cyan

          # Remove old solution if exists
          if (Test-Path "FractalDataWorks.sln") {
            Remove-Item "FractalDataWorks.sln" -Force
          }

          # Create new solution
          dotnet new sln -n "FractalDataWorks" | Out-Null

          # Find all .csproj files and add to solution
          $projects = Get-ChildItem -Path . -Filter "*.csproj" -Recurse -File |
            Where-Object { $_.FullName -notlike "*\bin\*" -and $_.FullName -notlike "*\obj\*" }

          $added = 0
          foreach ($proj in $projects) {
            Write-Host "  Adding: $($proj.BaseName)" -ForegroundColor White
            dotnet sln add $proj.FullName 2>&1 | Out-Null
            if ($LASTEXITCODE -eq 0) { $added++ }
          }

          Write-Host ""
          Write-Host "✓ Created FractalDataWorks.sln with $added projects" -ForegroundColor Green

      - name: Commit and push changes
        shell: pwsh
        run: |
          cd public-repo

          # Check for changes
          $status = git status --porcelain
          if (-not $status) {
            Write-Host "No changes to commit" -ForegroundColor Yellow
            exit 0
          }

          # Add all changes
          git add -A

          # Create commit
          $commitSha = "${{ github.sha }}".Substring(0, 7)
          $commitMsg = @"
          Sync from private repo @ $commitSha

          Automated sync from private repository
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Trigger: ${{ github.event_name }}
          "@

          git commit -m $commitMsg

          # Push to the same branch name
          $branch = "${{ github.ref_name }}"
          git push origin HEAD:$branch

          Write-Host "✓ Changes pushed to public repository branch: $branch" -ForegroundColor Green

      - name: Summary
        shell: pwsh
        run: |
          $summary = @"
          ### Public Mirror Sync Complete ✓

          **Branch:** ${{ github.ref_name }}
          **Commit:** ``${{ github.sha }}``
          **Projects synced:** ${{ steps.discover.outputs.project_count }}

          Public repository has been updated with latest changes from projects marked with ``<IsPublicProject>true</IsPublicProject>``.
          "@

          $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding UTF8
