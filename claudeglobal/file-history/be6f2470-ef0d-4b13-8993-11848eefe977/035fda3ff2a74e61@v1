using System.Collections.Generic;
using FractalDataWorks.Services.Abstractions;
using FractalDataWorks.ServiceTypes;

namespace FractalDataWorks.Services.SecretManagers.Abstractions;

/// <summary>
/// Interface for secret management service type definitions.
/// Provides secret management-specific metadata on top of the base service type.
/// </summary>
public interface ISecretManagerServiceType : IServiceType<IGenericService, IServiceFactory<IGenericService, ISecretManagerConfiguration>, ISecretManagerConfiguration>
{
    /// <summary>
    /// Gets the secret store types supported by this provider.
    /// </summary>
    /// <value>An array of secret store identifiers this provider can handle.</value>
    /// <remarks>
    /// Examples: ["AzureKeyVault", "AzureAppConfiguration"] for Azure providers,
    /// ["HashiCorpVault"] for HashiCorp Vault,
    /// ["AWSSecretsManager", "AWSParameterStore"] for AWS providers.
    /// </remarks>
    string[] SupportedSecretStores { get; }

    /// <summary>
    /// Gets the secret types supported by this provider.
    /// </summary>
    /// <value>A read-only list of supported secret types.</value>
    /// <remarks>
    /// Common secret types include:
    /// - "Password": Plain text passwords
    /// - "Certificate": X.509 certificates
    /// - "Key": Cryptographic keys
    /// - "ConnectionString": Database or service connection strings
    /// - "ApiKey": API keys and tokens
    /// </remarks>
    IReadOnlyList<string> SupportedSecretTypes { get; }

    /// <summary>
    /// Gets a value indicating whether this provider supports secret rotation.
    /// </summary>
    bool SupportsRotation { get; }

    /// <summary>
    /// Gets a value indicating whether this provider supports secret versioning.
    /// </summary>
    bool SupportsVersioning { get; }

    /// <summary>
    /// Gets a value indicating whether this provider supports soft delete.
    /// </summary>
    bool SupportsSoftDelete { get; }

    /// <summary>
    /// Gets a value indicating whether this provider supports access policies.
    /// </summary>
    bool SupportsAccessPolicies { get; }

    /// <summary>
    /// Gets the maximum secret size in bytes supported by this provider.
    /// </summary>
    /// <value>The maximum size in bytes, or 0 if unlimited.</value>
    int MaxSecretSizeBytes { get; }
}