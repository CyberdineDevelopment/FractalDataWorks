using System;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using FractalDataWorks.Results;
using FractalDataWorks.Services.Authentication.Abstractions;
using FractalDataWorks.Services.Authentication.Abstractions.Messages;
using FractalDataWorks.Services.Authentication.Abstractions.Security;
using FractalDataWorks.Services.Authentication.Logging;

namespace FractalDataWorks.Services.Authentication;

/// <summary>
/// Implementation of authentication provider that uses AuthenticationTypes for service lookup.
/// Follows the ServiceType pattern documented in Services.Abstractions README.
/// </summary>
public sealed class AuthenticationProvider : IAuthenticationProvider
{
    private readonly IServiceProvider _serviceProvider;
    private readonly IConfiguration _configuration;
    private readonly ILogger<AuthenticationProvider> _logger;

    /// <summary>
    /// Initializes a new instance of the <see cref="AuthenticationProvider"/> class.
    /// </summary>
    /// <param name="serviceProvider">The service provider for resolving factories.</param>
    /// <param name="configuration">The configuration for loading authentication settings.</param>
    /// <param name="logger">The logger for logging operations.</param>
    public AuthenticationProvider(
        IServiceProvider serviceProvider,
        IConfiguration configuration,
        ILogger<AuthenticationProvider> logger)
    {
        _serviceProvider = serviceProvider ?? throw new ArgumentNullException(nameof(serviceProvider));
        _configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    /// <summary>
    /// Gets an authentication service using the provided configuration.
    /// The configuration's AuthenticationType property determines which factory to use.
    /// </summary>
    /// <param name="configuration">The configuration containing the authentication type and settings.</param>
    /// <returns>A result containing the authentication service instance or failure information.</returns>
    public async Task<IGenericResult<IAuthenticationService>> GetAuthenticationService(IAuthenticationConfiguration configuration)
    {
        if (configuration == null)
        {
            return GenericResult<IAuthenticationService>.Failure(AuthenticationMessages.ConfigurationNull());
        }

        try
        {
            AuthenticationProviderLog.GettingAuthenticationService(_logger, configuration.AuthenticationType);

            // Look up the authentication type by the configuration's AuthenticationType property
            // This will use the generated AuthenticationTypes static class
            var authenticationType = AuthenticationTypes.Name(configuration.AuthenticationType);
            if (authenticationType.IsEmpty)
            {
                AuthenticationProviderLog.UnknownAuthenticationType(_logger, configuration.AuthenticationType);
                return GenericResult<IAuthenticationService>.Failure(
                    AuthenticationMessages.UnknownAuthenticationType(configuration.AuthenticationType));
            }

            // Get the factory from DI
            var factory = _serviceProvider.GetService(authenticationType.FactoryType) as IAuthenticationServiceFactory;
            if (factory == null)
            {
                AuthenticationProviderLog.NoFactoryRegistered(_logger, configuration.AuthenticationType);
                return GenericResult<IAuthenticationService>.Failure(
                    AuthenticationMessages.NoFactoryRegistered(configuration.AuthenticationType));
            }

            // Create the authentication service using the factory
            var result = await factory.Create(configuration);

            if (result.IsSuccess)
            {
                AuthenticationProviderLog.AuthenticationServiceCreated(_logger, configuration.AuthenticationType);
            }
            else
            {
                AuthenticationProviderLog.AuthenticationServiceCreationFailed(_logger, configuration.AuthenticationType, result.Error);
            }

            return result;
        }
        catch (Exception ex)
        {
            AuthenticationProviderLog.AuthenticationServiceCreationException(_logger, ex, configuration.AuthenticationType);
            return GenericResult<IAuthenticationService>.Failure(AuthenticationMessages.ServiceCreationException(ex.Message));
        }
    }

    /// <summary>
    /// Gets an authentication service by configuration name from appsettings.
    /// </summary>
    /// <param name="configurationName">The name of the configuration section.</param>
    /// <returns>A result containing the authentication service instance or failure information.</returns>
    public async Task<IGenericResult<IAuthenticationService>> GetAuthenticationService(string configurationName)
    {
        if (string.IsNullOrEmpty(configurationName))
        {
            return GenericResult<IAuthenticationService>.Failure(AuthenticationMessages.ConfigurationNameNull());
        }

        try
        {
            AuthenticationProviderLog.GettingAuthenticationServiceByConfigurationName(_logger, configurationName);

            // Load configuration section
            var section = _configuration.GetSection($"Authentication:{configurationName}");
            if (!section.Exists())
            {
                AuthenticationProviderLog.ConfigurationSectionNotFound(_logger, configurationName);
                return GenericResult<IAuthenticationService>.Failure(AuthenticationMessages.ConfigurationSectionNotFound(configurationName));
            }

            // Get the authentication type from the section
            var authenticationTypeName = section["AuthenticationType"];
            if (string.IsNullOrEmpty(authenticationTypeName))
            {
                AuthenticationProviderLog.AuthenticationTypeNotSpecified(_logger, configurationName);
                return GenericResult<IAuthenticationService>.Failure(AuthenticationMessages.AuthenticationTypeNotSpecified(configurationName));
            }

            // Look up the authentication type
            var authenticationType = AuthenticationTypes.Name(authenticationTypeName);
            if (authenticationType.IsEmpty)
            {
                AuthenticationProviderLog.UnknownAuthenticationTypeInConfiguration(_logger, authenticationTypeName);
                return GenericResult<IAuthenticationService>.Failure(AuthenticationMessages.UnknownAuthenticationType(authenticationTypeName));
            }

            // Bind to the appropriate configuration type
            var config = section.Get(authenticationType.ConfigurationType) as IAuthenticationConfiguration;
            if (config == null)
            {
                AuthenticationProviderLog.ConfigurationBindingFailed(_logger, authenticationType.ConfigurationType?.Name);
                return GenericResult<IAuthenticationService>.Failure(AuthenticationMessages.ConfigurationBindingFailed(authenticationType.ConfigurationType?.Name));
            }

            // Use the main method to create the authentication service
            return await GetAuthenticationService(config);
        }
        catch (Exception ex)
        {
            AuthenticationProviderLog.GetAuthenticationServiceByNameException(_logger, ex, configurationName);
            return GenericResult<IAuthenticationService>.Failure(AuthenticationMessages.ServiceCreationException(ex.Message));
        }
    }
}
