using System;
using System.Text;
using FractalDataWorks.SourceGenerators.Configuration;
using FractalDataWorks.SourceGenerators.Models;

namespace FractalDataWorks.SourceGenerators.Generators;

/// <summary>
/// Generates Empty classes for collection value types.
/// </summary>
public sealed class EmptyClassGenerator
{
    private readonly CollectionBuilderConfiguration _config;

    public EmptyClassGenerator(CollectionBuilderConfiguration config)
    {
        _config = config ?? throw new ArgumentNullException(nameof(config));
    }

    /// <summary>
    /// Generates an Empty class for a collection value type.
    /// </summary>
    /// <param name="definition">The type definition</param>
    /// <param name="returnType">The return type (e.g., "AuthenticationTypeBase")</param>
    /// <param name="namespace">The namespace for the Empty class</param>
    /// <returns>The generated Empty class code</returns>
    public string GenerateEmptyClass(
        GenericTypeInfoModel definition,
        string returnType,
        string @namespace)
    {
        if (!_config.GenerateEmptyClasses)
            return string.Empty;

        var emptyClassName = $"Empty{returnType}";
        var sb = new StringBuilder();

        // Namespace
        sb.AppendLine($"namespace {@namespace};");
        sb.AppendLine();

        // XML documentation
        sb.AppendLine("/// <summary>");
        sb.AppendLine($"/// Empty instance of {returnType} representing a null/default state.");
        sb.AppendLine("/// </summary>");

        // Class declaration
        sb.AppendLine($"public sealed class {emptyClassName} : {returnType}");
        sb.AppendLine("{");

        // Constructor
        sb.AppendLine("    /// <summary>");
        sb.AppendLine($"    /// Initializes a new instance of the <see cref=\"{emptyClassName}\"/> class.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine($"    public {emptyClassName}()");
        sb.AppendLine("        : base(id: 0, name: string.Empty)");
        sb.AppendLine("    {");
        sb.AppendLine("    }");

        sb.AppendLine("}");

        return sb.ToString();
    }
}
