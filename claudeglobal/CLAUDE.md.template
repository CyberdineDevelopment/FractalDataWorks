# User CLAUDE.md Template for C# Projects

This is a template for your global `~/.claude/CLAUDE.md` file. Customize per your preferences.

---

## Environment & Tools

### Shell
- Use PowerShell 7 (`pwsh`) for all commands, not Windows PowerShell
- Always quote paths with spaces: `cd "path with spaces"`

### IDE & Editor
- Primary IDE: [Visual Studio / Rider / VS Code]
- Solution file locations: [typically in repo root]
- Preferred test runner: [dotnet test / Rider / VS Test Explorer]

## C# Conventions & Style

### Language Version
- Target framework: [net8.0 / net10.0 / netstandard2.0]
- C# language version: [latest / preview / specific version]
- Nullable reference types: [enabled / disabled]

### Code Style
**File Organization:**
- One primary type per file
- File name matches type name
- Nested/inner types allowed in same file as parent
- Generic variants together: `Foo.cs` contains `Foo`, `Foo<T>`, `Foo<T1,T2>`

**Namespace Style:**
- File-scoped namespaces (C# 10+): `namespace MyNamespace;`
- Match folder structure to namespace

**Using Statements:**
- ImplicitUsings: [enabled / disabled]
- Order: System first, then third-party, then local
- Remove unused usings before committing

**Naming Conventions:**
- Async methods: [AsyncSuffix / NoSuffix]
- Private fields: [_camelCase / camelCase / m_camelCase]
- Interfaces: IPascalCase
- Constants: SCREAMING_SNAKE_CASE / PascalCase

**Modern C# Patterns:**
- Collection expressions: `[]` instead of `new List<T>()`
- Target-typed new: `List<int> list = new();`
- Pattern matching: prefer over type checks
- Records for immutable data
- Init-only properties: `{ get; init; }`

**Avoid:**
- Double-null defensive programming (let compiler handle nulls)
- Exceptions for anticipated conditions (return Result pattern)
- [Any other anti-patterns specific to you]

## Project Architecture Patterns

### Common Project Types
- `*.Abstractions` - Interfaces, contracts, no implementation
- `*.Core` / Base project - Shared implementation
- `*.Infrastructure` - External dependencies (DB, HTTP, etc.)
- `*.Api` / `*.Web` - Entry points
- `*.Tests` - Test projects (one per source project)

### Dependency Flow
- Abstractions ← Core ← Infrastructure ← Api
- Tests can reference any layer
- No circular dependencies

### Testing
- Framework: [xUnit / NUnit / MSTest]
- Assertion library: [Fluent Assertions / Shouldly / xUnit Assert]
- Mocking: [Moq / NSubstitute / FakeItEasy]
- Coverage tool: [Coverlet / dotCover]
- Coverage threshold: [80% / custom]

**Test Structure:**
```
tests/
├── ProjectName.Tests/          # Matches src/ProjectName
├── ProjectName.Core.Tests/     # Matches src/ProjectName.Core
└── ProjectName.Integration.Tests/  # Integration tests separate
```

**Test Naming:**
- Pattern: [MethodName_Scenario_ExpectedResult / Should_ExpectedResult_When_Scenario]
- One assert per test (generally)

## Build & CI/CD

### Build Commands
```bash
# Restore
dotnet restore

# Build
dotnet build                          # Debug
dotnet build -c Release              # Release

# Test
dotnet test                          # All tests
dotnet test --filter Category!=Integration  # Exclude integration
dotnet test --collect:"XPlat Code Coverage"  # With coverage

# Pack
dotnet pack -c Release -o ./artifacts
```

### Configuration Profiles
- Debug - Fast development, minimal checks
- Release - Full optimization, all analyzers
- [Any custom configs: Alpha, Beta, Preview]

### Version Management
- Strategy: [SemVer / GitVersion / Manual]
- Version file location: [version.json / Directory.Build.props / .csproj]

### Package Management
- Central package management: [Yes - Directory.Packages.props / No]
- Package sources: [NuGet.org / private feed]
- Always use: `dotnet add package` (never manual .csproj edits)

## Git Workflow

### Branching Strategy
- Main branch: [main / master / develop]
- Feature branches: [feature/* / feat/* / custom pattern]
- Release branches: [release/* / v*]

### Commit Messages
- Style: [Conventional Commits / Angular / Custom]
- Include ticket numbers: [Yes - JIRA-123 / No]
- Length: [50 char subject, 72 char body / custom]

### PR Process
- Target branch: [develop / main]
- Required reviewers: [1 / 2 / custom]
- CI must pass before merge
- Squash commits: [Yes / No / Case-by-case]

## Domain-Specific Rules

### [Your Domain] Patterns
[Example for enterprise applications:]
- Services must implement `IService<TRequest, TResponse>`
- All operations return `Result<T>` not exceptions
- Commands use CQRS pattern
- Events published via MediatR

### [Your Domain] Anti-Patterns
[Example:]
- Never return null, use Option<T> or Result<T>
- No static mutable state
- No ServiceLocator anti-pattern
- Avoid primitive obsession (use value objects)

## Critical Project-Specific Rules

**IMPORTANT:** These override any default behaviors.

1. [Example: Source generators must be referenced with OutputItemType="Analyzer"]
2. [Example: Configuration uses strongly-typed classes, not IOptions<T>]
3. [Example: All database access goes through repositories, no direct DbContext]
4. [Example: API controllers are thin, business logic in services]
5. [Your specific rules...]

## Common Operations

### Adding New [Service/Module/Feature]
```bash
# 1. Create project structure
dotnet new classlib -n ProjectName.Feature
dotnet sln add src/ProjectName.Feature

# 2. Add references
dotnet add reference ../ProjectName.Core

# 3. Your specific steps...
```

### Adding Database Migration
[Your EF Core / Dapper / other workflow]

### Adding New API Endpoint
[Your API pattern]

### Running Integration Tests
[Your integration test setup]

## Code Review Checklist

When reviewing my changes, check:
- [ ] Tests added/updated
- [ ] XML documentation on public APIs
- [ ] No magic strings/numbers (use constants)
- [ ] Error handling appropriate
- [ ] Logging added for important operations
- [ ] [Your custom checks...]

## Common Pitfalls

Things to avoid in this codebase:
1. [Example: Never catch Exception, catch specific types]
2. [Example: Don't use DateTime.Now, use ISystemClock]
3. [Example: Avoid Task.Result, use await]
4. [Your common mistakes...]

## Proactiveness Guidelines

**Ask First Before:**
- Major architectural changes
- Deleting significant code (>50 lines)
- Changing public APIs
- Adding new dependencies
- [Your items...]

**Just Do It:**
- Implementing requested features
- Fixing obvious bugs
- Adding tests
- Improving code clarity
- Updating documentation
- [Your items...]

## External Resources

### Documentation
- Project wiki: [URL]
- Architecture diagrams: [Location]
- API documentation: [Swagger URL / location]

### Team Conventions
- Team style guide: [URL or location]
- Code review guide: [URL or location]

## Notes

- This file is global across all C# projects
- Override with project-specific `.claude/CLAUDE.md` in repo root
- Project-specific rules take precedence over global rules
- Keep this updated as conventions evolve

---

## Instructions for Use

1. Save as `C:\Users\[YourUser]\.claude\CLAUDE.md`
2. Fill in [bracketed] sections with your preferences
3. Remove sections not relevant to you
4. Add project-specific overrides in each repo's `.claude/CLAUDE.md`
