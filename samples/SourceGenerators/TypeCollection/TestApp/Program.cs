using DataStore.Abstractions;


Console.WriteLine("=== TypeCollection Generator Test ===");

try
{
    // These should be generated by TypeCollectionGenerator:
    Console.WriteLine($"All DataStore types count: {DataStoreTypes.All().Count}");
    
    // Test individual type access:
    var sqlServer = DataStoreTypes.SqlServer;
    var fileSystem = DataStoreTypes.FileSystem;
    var restApi = DataStoreTypes.RestApi;
    
    Console.WriteLine($"SqlServer: {sqlServer.Name} (ID: {sqlServer.Id})");
    Console.WriteLine($"FileSystem: {fileSystem.Name} (ID: {fileSystem.Id})");
    Console.WriteLine($"RestApi: {restApi.Name} (ID: {restApi.Id})");
    
    // Test lookup methods:
    var byName = DataStoreTypes.Name("SqlServer");
    var byId = DataStoreTypes.Id(1);
    
    Console.WriteLine($"By Name 'SqlServer': {byName.Name}");
    Console.WriteLine($"By ID 1: {byId.Name}");
    
    Console.WriteLine("SUCCESS: TypeCollectionGenerator is working!");
}
catch (Exception ex)
{
    Console.WriteLine($"FAILED: {ex.Message}");
    Console.WriteLine("TypeCollectionGenerator is not generating expected code.");
}
