using Microsoft.CodeAnalysis;

namespace SimpleGenerator;

[Generator]
public sealed class SimpleTestGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // Add a debug initialization marker
        context.RegisterPostInitializationOutput(static context =>
        {
            context.AddSource("SimpleTestGenerator.Init.g.cs", 
                $$"""
                // DEBUG: SimpleTestGenerator initialized at {{System.DateTime.Now}}
                // This file proves the generator is loaded and executing

                namespace SimpleGenerator.Generated;

                public static class SimpleGeneratorTest
                {
                    public const string Message = "Simple generator is working!";
                    public const string Timestamp = "{{System.DateTime.Now}}";
                }
                """);
        });

        // Create a simple provider that generates a test class
        var provider = context.CompilationProvider
            .Select(static (compilation, _) => compilation.AssemblyName ?? "Unknown");

        context.RegisterSourceOutput(provider, static (context, assemblyName) =>
        {
            var source = 
                $$"""
                // Generated by SimpleTestGenerator for assembly: {{assemblyName}}

                namespace SimpleGenerator.Generated;

                public static class GeneratedTestClass
                {
                    public static string GetAssemblyName() => "{{assemblyName}}";
                    
                    public static string[] GetTestValues() => new[]
                    {
                        "Value1",
                        "Value2", 
                        "Value3"
                    };
                }
                """;

            context.AddSource("GeneratedTestClass.g.cs", source);
        });
    }
}