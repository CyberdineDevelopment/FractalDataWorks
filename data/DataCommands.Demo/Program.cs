using System.Text.Json;
using FractalDataWorks.Commands.Data;
using FractalDataWorks.Commands.Data.Abstractions;

// Create operator instances (TypeCollection static properties will be generated by source generator when fully wired)
var equalOp = new EqualOperator();
var notEqualOp = new NotEqualOperator();
var containsOp = new ContainsOperator();
var startsWithOp = new StartsWithOperator();
var endsWithOp = new EndsWithOperator();
var greaterThanOp = new GreaterThanOperator();
var greaterThanOrEqualOp = new GreaterThanOrEqualOperator();
var lessThanOp = new LessThanOperator();
var lessThanOrEqualOp = new LessThanOrEqualOperator();
var isNullOp = new IsNullOperator();
var isNotNullOp = new IsNotNullOperator();
var inOp = new InOperator();

Console.WriteLine("==============================================");
Console.WriteLine("DataCommands Architecture Demo");
Console.WriteLine("==============================================\n");

// Sample entity for demonstration
var customer = new Customer
{
    Id = 123,
    Name = "Acme Corporation",
    Email = "contact@acme.com",
    IsActive = true,
    CreatedDate = DateTime.UtcNow
};

// ============================================================
// 1. QUERY COMMAND - Complex query with filters, ordering, paging
// ============================================================
Console.WriteLine("1. QUERY COMMAND - Find active customers");
Console.WriteLine("----------------------------------------");

var queryCommand = new QueryCommand<Customer>("Customers")
{
    Filter = new FilterExpression
    {
        Conditions = new[]
        {
            new FilterCondition
            {
                PropertyName = "IsActive",
                Operator = equalOp,
                Value = true
            },
            new FilterCondition
            {
                PropertyName = "Name",
                Operator = containsOp,
                Value = "Corp"
            }
        },
        LogicalOperator = LogicalOperator.And
    },
    Ordering = new OrderingExpression
    {
        OrderedFields = new[]
        {
            new OrderedField
            {
                PropertyName = "CreatedDate",
                Direction = SortDirection.Descending
            },
            new OrderedField
            {
                PropertyName = "Name",
                Direction = SortDirection.Ascending
            }
        }
    },
    Paging = new PagingExpression
    {
        Skip = 0,
        Take = 50
    },
    Projection = new ProjectionExpression
    {
        Fields = new[]
        {
            new ProjectionField { PropertyName = "Id" },
            new ProjectionField { PropertyName = "Name" },
            new ProjectionField { PropertyName = "Email" }
        }
    }
};

Console.WriteLine("Command Details:");
Console.WriteLine($"  Type: {queryCommand.GetType().Name}");
Console.WriteLine($"  Container: {queryCommand.ContainerName}");
Console.WriteLine($"  Category: {queryCommand.Category.Name}");
Console.WriteLine($"  Requires Transaction: {queryCommand.Category.RequiresTransaction}");
Console.WriteLine($"  Is Cacheable: {queryCommand.Category.IsCacheable}");
Console.WriteLine();

Console.WriteLine("Filter Details:");
if (queryCommand.Filter != null)
{
    foreach (var condition in queryCommand.Filter.Conditions)
    {
        Console.WriteLine($"  {condition.PropertyName} {condition.Operator.Name} {condition.Value}");
        Console.WriteLine($"    SQL: {condition.PropertyName} {condition.Operator.SqlOperator} @{condition.PropertyName}");
        Console.WriteLine($"    OData: {condition.PropertyName} {condition.Operator.ODataOperator}({condition.Operator.FormatODataValue(condition.Value)})");
    }
}
Console.WriteLine();

Console.WriteLine("Ordering:");
if (queryCommand.Ordering != null)
{
    foreach (var field in queryCommand.Ordering.OrderedFields)
    {
        Console.WriteLine($"  {field.PropertyName} {field.Direction.Name} (SQL: {field.Direction.SqlKeyword}, OData: {field.Direction.ODataKeyword})");
    }
}
Console.WriteLine();

Console.WriteLine("Paging:");
Console.WriteLine($"  Skip: {queryCommand.Paging?.Skip}, Take: {queryCommand.Paging?.Take}");
Console.WriteLine();

Console.WriteLine("Expected SQL Translation:");
Console.WriteLine("  SELECT Id, Name, Email");
Console.WriteLine("  FROM Customers");
Console.WriteLine("  WHERE IsActive = @IsActive AND Name LIKE '%' + @Name + '%'");
Console.WriteLine("  ORDER BY CreatedDate DESC, Name ASC");
Console.WriteLine("  OFFSET 0 ROWS FETCH NEXT 50 ROWS ONLY");
Console.WriteLine();

Console.WriteLine("Expected OData Translation:");
Console.WriteLine("  GET /Customers?$select=Id,Name,Email&$filter=IsActive eq true and contains(Name,'Corp')&$orderby=CreatedDate desc,Name asc&$skip=0&$top=50");
Console.WriteLine("\n");

// ============================================================
// 2. INSERT COMMAND
// ============================================================
Console.WriteLine("2. INSERT COMMAND - Create new customer");
Console.WriteLine("----------------------------------------");

var insertCommand = new InsertCommand<Customer>("Customers", customer);

Console.WriteLine("Command Details:");
Console.WriteLine($"  Type: {insertCommand.GetType().Name}");
Console.WriteLine($"  Container: {insertCommand.ContainerName}");
Console.WriteLine($"  Category: {insertCommand.Category.Name}");
Console.WriteLine($"  Requires Transaction: {insertCommand.Category.RequiresTransaction}");
Console.WriteLine($"  Is Mutation: {insertCommand.Category.IsMutation}");
Console.WriteLine();

Console.WriteLine("Data to Insert:");
Console.WriteLine(JsonSerializer.Serialize(insertCommand.Data, new JsonSerializerOptions { WriteIndented = true }));
Console.WriteLine();

Console.WriteLine("Expected SQL Translation:");
Console.WriteLine("  INSERT INTO Customers (Id, Name, Email, IsActive, CreatedDate)");
Console.WriteLine("  VALUES (@Id, @Name, @Email, @IsActive, @CreatedDate)");
Console.WriteLine();

Console.WriteLine("Expected REST Translation:");
Console.WriteLine("  POST /Customers");
Console.WriteLine("  Content-Type: application/json");
Console.WriteLine("  Body: {json}");
Console.WriteLine("\n");

// ============================================================
// 3. UPDATE COMMAND
// ============================================================
Console.WriteLine("3. UPDATE COMMAND - Update customer");
Console.WriteLine("----------------------------------------");

var updatedCustomer = customer with { Name = "Acme Industries", Email = "info@acme.com" };
var updateCommand = new UpdateCommand<Customer>("Customers", updatedCustomer)
{
    Filter = new FilterExpression
    {
        Conditions = new[]
        {
            new FilterCondition
            {
                PropertyName = "Id",
                Operator = equalOp,
                Value = 123
            }
        }
    }
};

Console.WriteLine("Command Details:");
Console.WriteLine($"  Type: {updateCommand.GetType().Name}");
Console.WriteLine($"  Container: {updateCommand.ContainerName}");
Console.WriteLine($"  Category: {updateCommand.Category.Name}");
Console.WriteLine();

Console.WriteLine("Updated Data:");
Console.WriteLine(JsonSerializer.Serialize(updateCommand.Data, new JsonSerializerOptions { WriteIndented = true }));
Console.WriteLine();

Console.WriteLine("Expected SQL Translation:");
Console.WriteLine("  UPDATE Customers");
Console.WriteLine("  SET Name = @Name, Email = @Email, IsActive = @IsActive, CreatedDate = @CreatedDate");
Console.WriteLine("  WHERE Id = @Id");
Console.WriteLine();

Console.WriteLine("Expected REST Translation:");
Console.WriteLine("  PUT /Customers(123)");
Console.WriteLine("  Content-Type: application/json");
Console.WriteLine("  Body: {json}");
Console.WriteLine("\n");

// ============================================================
// 4. DELETE COMMAND
// ============================================================
Console.WriteLine("4. DELETE COMMAND - Remove customer");
Console.WriteLine("----------------------------------------");

var deleteCommand = new DeleteCommand("Customers")
{
    Filter = new FilterExpression
    {
        Conditions = new[]
        {
            new FilterCondition
            {
                PropertyName = "Id",
                Operator = equalOp,
                Value = 123
            }
        }
    }
};

Console.WriteLine("Command Details:");
Console.WriteLine($"  Type: {deleteCommand.GetType().Name}");
Console.WriteLine($"  Container: {deleteCommand.ContainerName}");
Console.WriteLine($"  Category: {deleteCommand.Category.Name}");
Console.WriteLine();

Console.WriteLine("Expected SQL Translation:");
Console.WriteLine("  DELETE FROM Customers");
Console.WriteLine("  WHERE Id = @Id");
Console.WriteLine();

Console.WriteLine("Expected REST Translation:");
Console.WriteLine("  DELETE /Customers(123)");
Console.WriteLine("\n");

// ============================================================
// 5. FILTER OPERATORS DEMONSTRATION
// ============================================================
Console.WriteLine("5. ALL FILTER OPERATORS");
Console.WriteLine("----------------------------------------");

var operators = new (FilterOperatorBase op, string prop, object? value)[]
{
    (equalOp, "IsActive", (object)true),
    (notEqualOp, "Status", "Deleted"),
    (containsOp, "Name", "Acme"),
    (startsWithOp, "Email", "contact"),
    (endsWithOp, "Email", "@acme.com"),
    (greaterThanOp, "Revenue", (object)1000000),
    (greaterThanOrEqualOp, "EmployeeCount", (object)50),
    (lessThanOp, "Age", (object)65),
    (lessThanOrEqualOp, "Discount", (object)0.2),
    (isNullOp, "DeletedDate", null),
    (isNotNullOp, "LastLoginDate", null),
    (inOp, "Status", new[] { "Active", "Pending", "Review" })
};

foreach (var (op, prop, value) in operators)
{
    Console.WriteLine($"{op.Name} ({op.Id}):");
    Console.WriteLine($"  Property: {prop}");
    Console.WriteLine($"  SQL: {prop} {op.SqlOperator} {(op.RequiresValue ? op.FormatSqlParameter(prop) : "")}");

    if (op.RequiresValue && value != null)
    {
        Console.WriteLine($"  OData: {prop} {op.ODataOperator} {op.FormatODataValue(value)}");
    }
    else if (!op.RequiresValue)
    {
        Console.WriteLine($"  OData: {prop} {op.ODataOperator}");
    }
    Console.WriteLine();
}

// ============================================================
// 6. COMPLEX QUERY - Multiple Filters with OR
// ============================================================
Console.WriteLine("6. COMPLEX QUERY - Multiple conditions with OR");
Console.WriteLine("----------------------------------------");

var complexQuery = new QueryCommand<Customer>("Customers")
{
    Filter = new FilterExpression
    {
        Conditions = new[]
        {
            new FilterCondition
            {
                PropertyName = "Email",
                Operator = endsWithOp,
                Value = "@acme.com"
            },
            new FilterCondition
            {
                PropertyName = "Email",
                Operator = endsWithOp,
                Value = "@acmecorp.com"
            },
            new FilterCondition
            {
                PropertyName = "IsActive",
                Operator = equalOp,
                Value = true
            }
        },
        LogicalOperator = LogicalOperator.Or
    }
};

Console.WriteLine("Expected SQL Translation:");
Console.WriteLine("  SELECT *");
Console.WriteLine("  FROM Customers");
Console.WriteLine("  WHERE (Email LIKE @Email + '%' OR Email LIKE @Email2 + '%' OR IsActive = @IsActive)");
Console.WriteLine();

Console.WriteLine("Expected OData Translation:");
Console.WriteLine("  GET /Customers?$filter=endswith(Email,'@acme.com') or endswith(Email,'@acmecorp.com') or IsActive eq true");
Console.WriteLine("\n");

// ============================================================
// 7. TYPE SAFETY DEMONSTRATION
// ============================================================
Console.WriteLine("7. TYPE SAFETY - Zero Boxing!");
Console.WriteLine("----------------------------------------");
Console.WriteLine("QueryCommand<Customer> returns IEnumerable<Customer>");
Console.WriteLine("InsertCommand<Customer> accepts Customer as input");
Console.WriteLine("UpdateCommand<Customer> accepts Customer as input");
Console.WriteLine("DeleteCommand returns int (affected rows)");
Console.WriteLine();
Console.WriteLine("NO CASTING REQUIRED - The compiler knows the types at compile time!");
Console.WriteLine("This is achieved through the 3-level generic hierarchy:");
Console.WriteLine("  - IDataCommand (non-generic marker)");
Console.WriteLine("  - IDataCommand<TResult> (typed result)");
Console.WriteLine("  - IDataCommand<TResult, TInput> (typed input and result)");
Console.WriteLine();

Console.WriteLine("==============================================");
Console.WriteLine("Demo Complete!");
Console.WriteLine("==============================================");

// Sample entity class
record Customer
{
    public int Id { get; init; }
    public required string Name { get; init; }
    public required string Email { get; init; }
    public bool IsActive { get; init; }
    public DateTime CreatedDate { get; init; }
}
